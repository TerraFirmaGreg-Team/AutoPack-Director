package net.jan.moddirector.ui.page;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import net.jan.moddirector.UnsafeExit;
import net.jan.moddirector.i18n.Messages;
import net.jan.moddirector.ui.components.ScrollablePane;
import net.jan.moddirector.core.manage.install.InstallableMod;

import javax.swing.*;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.List;
import java.util.concurrent.CountDownLatch;

public class ConsentPage extends JPanel {
    private final Messages messages;
    private final CountDownLatch nextLatch = new CountDownLatch(1);
    private JPanel root;
    private JLabel pageTitle;
    private JPanel content;
    private JButton nextButton;
    private JButton cancelAndExitButton;
    private JLabel info;

    public ConsentPage(List<InstallableMod> toInstall, Messages messages) {
        this.messages = messages;
        $$$setupUI$$$();
        pageTitle.setText(messages.get("mod_director.consent.title"));
        info.setText(asHtml(messages.get("mod_director.consent.info")));
        setLayout(new BorderLayout());
        add(root, BorderLayout.CENTER);
        nextButton.addActionListener((e) -> nextLatch.countDown());
        nextButton.setText(messages.get("mod_director.consent.accept_button_label"));
        cancelAndExitButton.addActionListener((e) -> UnsafeExit.exit(0));
        cancelAndExitButton.setText(messages.get("mod_director.consent.cancel_button_label"));
        toInstall.forEach(this::createEntry);
    }

    private void createUIComponents() {
        content = new ScrollablePane(true, false);
        content.setLayout(new BoxLayout(content, BoxLayout.Y_AXIS));
    }

    private void createEntry(InstallableMod mod) {
        var modPane = new JPanel();
        modPane.setLayout(new BoxLayout(modPane, BoxLayout.Y_AXIS));

        modPane.add(new JLabel(asHtml(mod.getRemoteInformation().displayName())));
        modPane.add(new JLabel(asHtml(mod.getRemoteMod().remoteUrl())));

        modPane.add(new JLabel(asHtml(mod.getTargetFile().toString())));
        var sourceName = messages.get("mod_director.consent.source", mod.getRemoteMod().remoteType());

        modPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(EtchedBorder.RAISED), sourceName, TitledBorder.CENTER, TitledBorder.TOP));

        content.add(modPane);
    }

    private String asHtml(String content) {
        return "<html>" + content + "</html>";
    }

    public void waitForNext() throws InterruptedException {
        nextLatch.await();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        pageTitle = new JLabel();
        pageTitle.setHorizontalAlignment(0);
        pageTitle.setHorizontalTextPosition(0);
        pageTitle.setText("PAGE TITLE");
        pageTitle.setVerticalAlignment(0);
        pageTitle.setVerticalTextPosition(0);
        root.add(pageTitle, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setHorizontalScrollBarPolicy(31);
        scrollPane1.setVerticalScrollBarPolicy(20);
        root.add(scrollPane1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        scrollPane1.setViewportView(content);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        root.add(panel1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        nextButton = new JButton();
        nextButton.setText("Accept and Install");
        panel1.add(nextButton, BorderLayout.EAST);
        cancelAndExitButton = new JButton();
        cancelAndExitButton.setText("Cancel and Exit");
        panel1.add(cancelAndExitButton, BorderLayout.WEST);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        root.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        info = new JLabel();
        info.setHorizontalAlignment(0);
        info.setHorizontalTextPosition(2);
        info.setText("INFO LABEL");
        panel2.add(info, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
