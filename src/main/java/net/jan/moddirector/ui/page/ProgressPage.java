package net.jan.moddirector.ui.page;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import net.jan.moddirector.ui.components.ScrollablePane;
import net.jan.moddirector.core.manage.ProgressCallback;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class ProgressPage extends JPanel {
    private JLabel pageTitle;
    private JPanel root;
    private JPanel progressArea;

    public ProgressPage(String title) {
        $$$setupUI$$$();
        setLayout(new BorderLayout());
        add(root, BorderLayout.CENTER);
        pageTitle.setText(title);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1, true, false));
        pageTitle = new JLabel();
        pageTitle.setHorizontalAlignment(0);
        pageTitle.setHorizontalTextPosition(0);
        pageTitle.setText("TITLE");
        pageTitle.setVerticalAlignment(0);
        pageTitle.setVerticalTextPosition(0);
        root.add(pageTitle, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setHorizontalScrollBarPolicy(31);
        scrollPane1.setVerticalScrollBarPolicy(20);
        root.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        scrollPane1.setViewportView(progressArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    private void createUIComponents() {
        progressArea = new ScrollablePane(true, false);
        progressArea.setLayout(new BoxLayout(progressArea, BoxLayout.Y_AXIS));
    }

    public ProgressCallback createProgressCallback(String title, String initialMessage) {
        return new VisualProgressCallback(title, initialMessage);
    }

    private class VisualProgressCallback implements ProgressCallback {
        boolean done;
        private JProgressBar progressBar;
        private int currentStep;

        private VisualProgressCallback(String title, String initialMessage) {
            SwingUtilities.invokeLater(() -> {
                progressBar = new JProgressBar();
                progressBar.setString(initialMessage);
                progressBar.setStringPainted(true);
                progressBar.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), title, TitledBorder.CENTER, TitledBorder.TOP));

                progressArea.add(progressBar);
                progressArea.revalidate();
                progressArea.repaint();
            });

            done = false;
            setSteps(1);
        }

        @Override
        public void setSteps(int steps) {
            currentStep = 0;
            SwingUtilities.invokeLater(() -> {
                progressBar.setMinimum(0);
                progressBar.setMaximum(steps * 100);
            });
        }

        @Override
        public void reportProgress(long current, long max) {
            int steppedPercent = (int) ((current * 100) / max) + (currentStep * 100);
            SwingUtilities.invokeLater(() -> progressBar.setValue(steppedPercent));
        }

        @Override
        public void message(String message) {
            SwingUtilities.invokeLater(() -> progressBar.setString(message));
        }

        @Override
        public void step() {
            currentStep++;
            reportProgress(0, 1);
        }

        @Override
        public void done() {
            if (done) {
                return;
            }

            SwingUtilities.invokeLater(() -> {
                progressArea.remove(progressBar);
                progressArea.revalidate();
                progressArea.repaint();
            });
            done = true;

        }

        @Override
        public void title(String newTitle) {
            SwingUtilities.invokeLater(() -> progressBar.setBorder(new TitledBorder(newTitle)));
        }

        @Override
        public void indeterminate(boolean isIndeterminate) {
            SwingUtilities.invokeLater(() -> progressBar.setIndeterminate(isIndeterminate));
        }
    }
}
